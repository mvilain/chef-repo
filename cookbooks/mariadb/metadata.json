{"name":"mariadb","version":"1.5.4","description":"Installs/Configures MariaDB","long_description":"MariaDB Cookbook\n================\n\n[![Build Status](https://travis-ci.org/sous-chefs/mariadb.svg?branch=master)](https://travis-ci.org/sous-chefs/mariadb) [![Cookbook Version](https://img.shields.io/cookbook/v/mariadb.svg)](https://supermarket.chef.io/cookbooks/mariadb)\n\nDescription\n-----------\n\nThis cookbook contains all the stuffs to install and configure and manage a mariadb server on a dpkg/apt compliant system (typically debian), or a rpm/yum compliant system (typically centos)\n\n\nRequirements\n------------\n\n#### repository\n- `mariadb` - This cookbook need that you have a valid apt repository installed with the mariadb official packages\n\n#### packages\n- `percona-xtrabackup` - if you want to use the xtrabckup SST Auth for galera cluster.\n- `mariadb-backup` - if you want to use the mariabackup SST Auth for galera cluster.\n- `socat` - if you want to use the xtrabckup or mariabackup SST Auth for galera cluster.\n- `rsync` - if you want to use the rsync SST Auth for galera cluster.\n- `debconf-utils` - if you use debian platform family.\n\n#### operating system\n- `debian` - this cookbook is fully tested on debian\n- `ubuntu` - this cookbook is fully tested on ubuntu\n- `centos` - this cookbook is fully tested on centos\n\n#### Chef version\nSince version 1.5.4 of this cookbook, the chef 12 support is dropped (chef 12 has reached end of life). Now chef 13 is the minimum version tested.\nIf you can't upgrade your chef 12, please use the version 1.5.3 or earlier of this cookbook.\n\nAttributes\n----------\n\n#### mariadb::default\n<table>\n  <tr>\n    <th>Key</th>\n    <th>Type</th>\n    <th>Description</th>\n    <th>Default</th>\n  </tr>\n  <tr>\n    <td><tt>['mariadb']['install']['version']</tt></td>\n    <td>String</td>\n    <td>Version to install (currently 10.0 et 5.5)</td>\n    <td><tt>10.0</tt></td>\n  </tr>\n  <tr>\n    <td><tt>['mariadb']['use_default_repository']</tt></td>\n    <td>Boolean</td>\n    <td>Whether to install MariaDB default repository or not. If you don't have a local repo containing packages, put it to true</td>\n    <td><tt>false</tt></td>\n  </tr>\n  <tr>\n    <td><tt>['mariadb']['server_root_password']</tt></td>\n    <td>String</td>\n    <td>local root password</td>\n    <td><tt></tt></td>\n  </tr>\n  <tr>\n    <td><tt>['mariadb']['forbid_remote_root']</tt></td>\n    <td>Boolean</td>\n    <td>Whether to activate root remote access</td>\n    <td><tt>true</tt></td>\n  </tr>\n  <tr>\n    <td><tt>['mariadb']['allow_root_pass_change']</tt></td>\n    <td>Boolean</td>\n    <td>Whether to allow the recipe to change root password after the first install</td>\n    <td><tt>false</tt></td>\n  </tr>\n  <tr>\n    <td><tt>['mariadb']['client']['development_files']</tt></td>\n    <td>Boolean</td>\n    <td>Whether to install development files in client recipe</td>\n    <td><tt>true</tt></td>\n  </tr>\n  <tr>\n    <td><tt>['mariadb']['apt_repository']['base_url']</tt></td>\n    <td>String</td>\n    <td>The http base url to use when installing from default repository</td>\n    <td><tt>'ftp.igh.cnrs.fr/pub/mariadb/repo'</tt></td>\n  </tr>\n  <tr>\n    <td><tt>['mariadb']['install']['prefer_os_package']</tt></td>\n    <td>Boolean</td>\n    <td>Indicator for preferring use packages shipped by running os</td>\n    <td><tt>false</tt></td>\n  </tr>\n  <tr>\n    <td><tt>['mariadb']['install']['prefer_scl_package']</tt></td>\n    <td>Boolean</td>\n    <td>Indicator for preferring packages from software collections repository</td>\n    <td><tt>false</tt></td>\n  </tr>\n</table>\n\nUsage\n-----\n\nTo install a default server for mariadb choose the version you want (MariaDB 5.5 or 10, galera or not), then call the recipe accordingly.\n\nList of availables recipes:\n\n- mariadb::default (just call server recipe with default options)\n- mariadb::server\n- mariadb::galera\n- mariadb::client\n- mariadb::devel\n\nPlease be ware that by default, the root password is empty! If you want have changed it use the `node['mariadb']['server_root_password']` attribute to put a correct value. And by default the remote root access is not activated. Use `node['mariadb']['forbid_remote_root']` attribute to change it.\n\nSometimes, the default apt repository used for apt does not work (see issue #6). In this case, you need to choose another mirror which worki (pick it from mariadb website), and put the http base url in the attribute `node['mariadb']['apt_repository']['base_url']`.\n\n#### mariadb::galera\n\nWhen installing the mariadb::galera on debian recipe, You have to take care of one specific attribute:\n`node['mariadb']['debian']['password']` which default to 'please-change-me'\nAs wee need to have the same password for this user on the whole cluster nodes... We will change the default install one by the content of this attribute.\n\n#### mariadb::client\n\nBy default this recipe installs the client, and all needed packages to develop client application. If you do not want to install development files when installing client package,\nset the attribute `node['mariadb']['client']['development_files']` to false. \n\n#### mariadb::devel\n\nBy default this recipe installs all needed packages to develop client application.\n\nResources/Providers\n----------\n\nThis recipe define several custom resources and providers:\n- `Chef::Provider::Mariadb::Configuration` shortcut resource `mariadb_configuration`\n\n#### mariadb_configuration\n\nMainly use for internal purpose. You can use it to create a new configuration file into configuration dir. You have to define 2 variables `section` and `option`.\nWhere `section` is the configuration section, and `option` is a hash of key/value. The name of the resource is used as base for the filename.\n\nExample:\n```ruby\nmariadb_configuration 'fake' do\n  section 'mysqld'\n  option :innodb_buffer_pool_size => node['mysql']['innodb_buffer_pool_size'],\n    :innodb_flush_method => node['mysql']['innodb_flush_method']\nend\n```\nwill become the file fake.cnf in the include dir (depend on your platform), which contain:\n```\n[mysqld]\nfoo=bar\n```\n\nIf the value start with a '#', then it's considered as a comment, and the value is printed as is (without the key)\n\nExample:\n```ruby\nmariadb_configuration 'fake' do\n  section 'mysqld'\n  option :comment1 => '# Here i am',\n    :foo => bar\nend\n```\nwill become the file fake.cnf in the include dir (depend on your platform), which contain:\n```\n[mysqld]\n# Here i am\nfoo=bar\n```\n\n#### mariadb_replication\n\nThis LWRP is used to manage replication setup on a host. To use this LWRP, the node need to have the mysql binary installed (via the mariadb::client or mariadb::server or mariadb::galera recipe).\nIt have 4 actions:\n- add - to add a new replication setup (become a slave)\n- stop - to stop the slave replication\n- start - to start the slave replication\n- remove - to remove the slave replication configuration\n\nThe resource name need to be 'default' if your don't want to use a named connection (multi source replication in MariaDB 10).\n\nSo by default the provider try to use the local instance of mysql, with the current root and password set in attribute node['mariadb']['server_root_password']. If you want to change, you have to define `host`, `port`, `user` or `password`\n\n```ruby\nmariadb_replication 'default' do\n  user 'root'\n  password 'fakepass'\n  host 'fakehost'\n  action :stop\nend\n```\nwill stop the replication on the host `fakehost` using the user `root` and password `fakepass` to connect to.\n\nWhen you add a replication configuration, you have to define at least 4 values `master_host`, `master_user`, `master_password` and `master_use_gtid`. And if you don't want the GTID support, you have to define also `master_log_file` and `master_log_pos`\n\nExample:\n```ruby\nmariadb_replication 'usefull_conn_name' do\n  master_host 'server1'\n  master_user 'slave_user'\n  master_password 'slave_password'\n  master_use_gtid 'current_pos'\n  action :add\nend\n```\n\nBy default, resource doesn't change master if slave is running. If you want to let resource change slave settings for replication channel while slave is running use `change_master_while_running` property. When it's set to `true` slave settings will be changed\nif either one of `master_host`, `master_port`, `master_user`, `master_password` and `master_use_gtid` was changed.\n\nChanges of only `master_log_file` and/or `master_log_pos` don't affect server if slave is already configured.\n\n#### mariadb_database\n\nManage databases and execute SQL queries on them. It works by establishing a control connection to the MariaDB server using the `mysql2` chef gem (automatically installed). It has 3 actions:\n- create - to create a named database\n- drop - to drop a named database\n- query - to execute a SQL query\n\n##### Syntax\n\nThe full syntax of all of the properties that are available to the `mariadb_database` resource is: \n\n```ruby\nmariadb_database 'name' do\n  # Credentials for the control connection\n  user                       String # defaults to 'root'\n  host                       String # defaults to 'localhost'\n  port                       String # defaults to node['mariadb']['mysqld']['port']\n  password                   String # defaults to node['mariadb']['server_root_password'] \n  # The database to be managed\n  database_name              String # defaults to 'name' if not specified\n  encoding                   String # defaults to 'utf8'\n  collation                  String # defaults to 'utf8_general_ci'\n  sql                        String, Proc # the SQL query to execute \n  action                     Symbol # defaults to :create if not specified\nend\n```\n\nWhen `host` has the value `localhost`, it will try to connect using the Unix socket defined in `node['mariadb']['client']['socket']`, or TCP/IP if no socket is defined.\n\n##### Examples\n\n```ruby\n# Create a database\nmariadb_database 'wordpress-cust01' do\n  host '127.0.0.1'\n  user 'root'\n  password node['wordpress-cust01']['mysql']['initial_root_password']\n  action :create\nend\n \n# Drop a database\nmariadb_database 'baz' do\n  action :drop\nend\n \n# Query a database\nmariadb_database 'flush the privileges' do\n  sql 'flush privileges'\n  action :query\nend\n```\n\nThe `query` action will NOT select a database before running the query, nor return the actual results from the SQL query.\n\n#### mariadb_user\n\nManage users and grant them privileges on database objects. It works by establishing a control connection to the MariaDB server using the `mysql2` chef gem (automatically installed). It has 4 actions:\n- create - to create a user\n- drop - to drop a user\n- grant - to grant privileges to a user\n- revoke - to revoke privileges from a user\n\n##### Syntax\n\nThe full syntax of all of the properties that are available to the `mariadb_user` resource is: \n\n```ruby\nmariadb_user 'name' do\n  # Credentials for the control connection\n  ctrl_user                  String # defaults to 'root'\n  ctrl_host                  String # defaults to 'localhost'\n  ctrl_port                  String # defaults to node['mariadb']['mysqld']['port']\n  ctrl_password              String # defaults to node['mariadb']['server_root_password'] \n  # The user to be managed\n  username                   String # defaults to 'name'\n  host                       String # defaults to 'localhost'\n  password                   String, HashedPassword\n  # The privileges to be granted/revoked\n  privileges                 Array # defaults to [:all]\n  database_name              String # to grant/revoke privileges on a database \n  table                      String # to grant/revoke privileges on a particular database table\n  grant_option               true|false # defaults to false \n  require_ssl                true|false # defaults to false\n  require_x509               true|false # defaults to false \n  action                     Symbol # defaults to :create if not specified\nend\n```\n\n##### Examples\n\n```ruby\n# Create an user but grant no privileges\nmariadb_user 'disenfranchised' do\n  password 'super_secret'\n  action :create\nend\n \n# Create an user using a hashed password string instead of plain text one\nmariadb_user 'disenfranchised' do\n  password hashed_password('md5eacdbf8d9847a76978bd515fae200a2a')\n  action :create\nend\n\n# Drop a user\nmariadb_user 'foo_user' do\n  action :drop\nend\n\n# Grant SELECT, UPDATE, and INSERT privileges to all tables in foo db from all hosts\nmariadb_user 'foo_user' do\n  password 'super_secret'\n  database_name 'foo'\n  host '%'\n  privileges [:select,:update,:insert]\n  action :grant\nend\n```\n\nContributing\n------------\n\n1. Fork the repository on Github\n2. Create a named feature branch (like `add_component_x`)\n3. Write your change\n4. Write tests for your change (if applicable)\n5. Run the tests, ensuring they all pass\n6. Submit a Pull Request using Github\n\nLicense and Authors\n-------------------\nAuthors:\nNicolas Blanc <sinfomicien@gmail.com>\n","maintainer":"Sous Chefs","maintainer_email":"help@sous-chefs.org","license":"Apache-2.0","platforms":{"ubuntu":">= 0.0.0","debian":">= 7.0","centos":">= 6.4"},"dependencies":{"apt":">= 0.0.0","build-essential":">= 0.0.0","selinux_policy":"~> 2.0","yum":">= 0.0.0","yum-epel":">= 0.0.0","yum-scl":">= 0.0.0"},"recommendations":{},"suggestions":{},"conflicting":{},"providing":{},"replacing":{},"attributes":{},"groupings":{},"recipes":{},"source_url":"https://github.com/sous-chefs/mariadb","issues_url":"https://github.com/sous-chefs/mariadb/issues","chef_version":[[">= 13"]],"ohai_version":[]}